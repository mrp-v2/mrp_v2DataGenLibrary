buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'

def capitalizedModId = modDisplayName.replace(' ', '')
def modId = capitalizedModId.toLowerCase()
def forgeVersion = "${forgeMajor}.${forgeMinor}.${forgePatch}"
def homepageURL = "https://www.curseforge.com/minecraft/mc-mods/${modDisplayName.replace(' ', '-').replace('_', '-').toLowerCase()}"
def issuesURL = "${homepageURL}/issues"
def updateURL = "https://raw.githubusercontent.com/mrp-v2/${capitalizedModId}/master/update.json"
def logo = "logo.png"
version = "${mcVersion}-${modMajorMod}.${modMajorAPI}.${modMinor}.${modPatch}"
archivesBaseName = modId
group = "${author}.${archivesBaseName}"

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' +
        System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                mrp_v2datagenlibrary {
                    source sourceSets.main
                }
            }
        }
        testClient {
            parent runs.client
            workingDirectory project.file('testrun')
            mods {
                mrp_v2datagenlibrary {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                mrp_v2datagenlibrary {
                    source sourceSets.main
                }
            }
        }
        testServer {
            parent runs.server
            workingDirectory project.file('testrun')
            mods {
                mrp_v2datagenlibrary {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', modId, '--all', '--output', file('src/generated/resources/')
            mods {
                mrp_v2datagenlibrary {
                    source sourceSets.main
                }
            }
        }
        testData {
            parent runs.data
            workingDirectory project.file('testrun')
            mods {
                mrp_v2datagenlibrary {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"
}

jar {
    manifest {
        attributes(["Specification-Title"     : archivesBaseName,
                    "Specification-Vendor"    : author,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : author,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
}

jar.finalizedBy('reobfJar')

processResources {
    inputs.property 'version', project.version
    inputs.property 'modId', modId
    inputs.property 'forgeMajor', forgeMajor
    inputs.property 'mcVersion', mcVersion
    inputs.property 'homepageURL', homepageURL
    inputs.property 'modDisplayName', modDisplayName
    inputs.property 'capitalizedModId', capitalizedModId
    inputs.property 'modDescription', modDescription
    inputs.property 'author', author
    inputs.property 'updateURL', updateURL
    inputs.property 'issuesURL', issuesURL
    inputs.property 'logo', logo
    from(sourceSets.main.resources.srcDirs) {
        include '**/*'
        exclude '**/*.png'
        expand 'version': project.version, 'modId': modId, 'forgeMajor': forgeMajor, 'mcVersion': mcVersion,
                'homepageURL': homepageURL, 'modDisplayName': modDisplayName, 'capitalizedModId': capitalizedModId,
                'modDescription': modDescription, 'author': author, 'updateURL': updateURL, 'issuesURL': issuesURL,
                'logo': logo
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*'
    }
}

task devJar(type: Jar) {
    classifier = 'dev'
    from sourceSets.main.output
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact devJar
        }
    }
}